
import os,sys,time,hashlib
from aiogram.dispatcher.filters import state
import aiohttp
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery
from numpy import exp
from pymongo import MongoClient
import utils.scrap_schedul as schedul_update
import utils.db as pdb 
import aioschedule
import asyncio
import config
import utils.time_lessons as time_lesson
import utils.task_manager as task_manager


#pdb.update_data()
API_TOKEN = config.Auth.API_TOKEN

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
#storage = MongoStorage(host=config.MongoAuth.host, port=27017, db_name='users', username="admin", password=config.MongoAuth.password) #–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

#–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Group(StatesGroup):  
    group_select = State()  # –°—Ç–∞—Ç—É—Å - –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    sub = State() #–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    complete = State()  #–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
class TaskCreate(StatesGroup):  
    name_select = State()  # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    lesson = State() #–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    time = State()  #–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

# –ü—Ä–∏–≤–µ—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if pdb.check_user(message.chat.id) is False:
        await Group.group_select.set()
        with open(config.FileLocation.cmd_welcome, 'r', encoding='utf-8') as file:
            await message.reply(file.read(), parse_mode='HTML', disable_web_page_preview=True)
    else:
        await bot.send_message(message.chat.id, "<b> –ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞ </b>", parse_mode='HTML', disable_web_page_preview=True)
        await Group.complete.set()
        await menu(message)

# –í–Ω–µ—Å–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã  
@dp.message_handler(state=Group.group_select)
async def select_group(message: types.Message,state: FSMContext):
    if pdb.check_group(message.text) == True:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        with open(config.FileLocation.cmd_group,'r', encoding='utf-8') as file:
            await message.reply(file.read(), parse_mode='HTML', disable_web_page_preview=True, reply_markup=markup)
        await Group.next()
        pdb.add_user(message.text,message.chat.id)
    else:
        await message.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã –≥—Ä—É–ø–ø–∞ –±—ã–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ì–ò–ë–û-05-19. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –∑–Ω–∞—á–∏—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏–±–æ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.", parse_mode='HTML', disable_web_page_preview=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 20 –º–∏–Ω—É—Ç
@dp.message_handler(state=Group.sub)
async def select_sub(message: types.Message,state: FSMContext):
    if message.text == "–î–∞":
        pdb.setup_notify(True,message.chat.id)
    else:
        pdb.setup_notify(False,message.chat.id)
    markup = types.ReplyKeyboardRemove()
    await Group.complete.set()
    await menu(message)
    # –ö–æ–Ω–µ—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=['menu'])
async def menu(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add("–°–µ–≥–æ–¥–Ω—è ‚è≤", "–ó–∞–≤—Ç—Ä–∞ üìÜ", "–ù–µ–¥–µ–ª—è üìÖ","–ú–æ–∏ –∑–∞–¥–∞—á–∏ üìã","–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†")
    with open(config.FileLocation.cmd_menu,'r', encoding='utf-8') as file:
            await message.reply(file.read(), parse_mode='HTML', disable_web_page_preview=True, reply_markup=markup)
# –î–ª—è —Ç–µ—Å—Ç–æ–≤           
@dp.message_handler(commands=['test'])
async def test(message: types.Message):
    await notif_every_lesson()

# –ü–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
@dp.message_handler(commands=['day','–ü–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'])
async def scheduler_today(message: types.Message):
    Lessons = "<b> –ü–∞—Ä—ã –Ω–∞ " + str(time_lesson.TodayToEmoji(0)) + " | "+ str(time_lesson.NumberOfMonth()) + " –Ω–µ–¥–µ–ª—è. </b> \n" 
    group = UsersDB.find_one({"chat_id":message.chat.id})["group"]
    check_lesson = False # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    for i in range(1,7):
        if time_lesson.NumberOfMonth() % 2 == 0: # –ß–µ—Ç–Ω–∞—è/ –Ω–µ —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
            a = i*2
        else:
            a = (i*2)-1
        if pdb.get_lesson(time_lesson.todayIs()+a,group) == "nan":
            pass
        else: 
            check_lesson = True
            Lessons = pdb.ready_lesson(Lessons,group, a,i)  
    #if check_lesson is False:
        #Lessons = "<b>–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç—É –ø–∞—Ä </b> ‚ú®üéâ\n –ò–¥–∏ –≥—É–ª—è–π)"
    await message.reply(Lessons, parse_mode='HTML', disable_web_page_preview=True)

@dp.message_handler(commands=['tomorow','–ü–∞—Ä—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞'])
async def scheduler_today(message: types.Message):
    Lessons = "<b> –ü–∞—Ä—ã –Ω–∞ " + str(time_lesson.TodayToEmoji(1)) + str(time_lesson.NumberOfMonth()) + " –Ω–µ–¥–µ–ª—è. </b> \n" 
    group = UsersDB.find_one({"chat_id":message.chat.id})["group"]
    check_lesson = False # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    for i in range(1,7):
        if time_lesson.NumberOfMonth() % 2 == 0: 
            a = i*2 + 12
        else:
            a = (i*2)-1 + 12
        if pdb.get_lesson(time_lesson.todayIs()+a,group) == "nan":
            pass
        else: 
            check_lesson = True
            # –ß–µ—Ç–Ω–∞—è/ –Ω–µ —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
            Lessons = pdb.ready_lesson(Lessons,group, a,i)
    if check_lesson is False:
        Lessons = "<b>–ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç—É –ø–∞—Ä </b> ‚ú®üéâ\n –ú–æ–∂–µ—à—å —Å–ø–∞—Ç—å –∏ –≥—É–ª—è—Ç—å))"
    await message.reply(Lessons, parse_mode='HTML', disable_web_page_preview=True)


# –£–≤–µ–¥–æ–º–ª—è–ª–∫–∏ —É—Ç—Ä–æ–º
async def notif_morning():
    for user in UsersDB.find({"sub":"True"}):
        #try:
        group = UsersDB.find_one({"chat_id":user["chat_id"]})["group"]
        Lesson = "<b> –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! </b> \n "
        a = 0 #–õ–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å –∏—Å—Ö–æ–¥—è –∏–∑ —á–µ—Ç–Ω–æ–π/–Ω–µ—á–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–µ –∏ –∫–æ–≥–¥–∞.
        if time_lesson.NumberOfMonth() % 2 == 0:
            a = 1
        if pdb.get_lesson(time_lesson.todayIs()+1+a,group) == "nan":
            Lesson = Lesson + " <code> –¢—ã –≤–µ–∑—É–Ω—á–∏–∫, –º–æ–∂–µ—à—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ø–∞—Ç—å, –∫ –ø–µ—Ä–≤–æ–π –Ω–µ –Ω–∞–¥–æ. </code> \n"
            if pdb.get_lesson(time_lesson.todayIs()+3+a,group) == "nan":
                Lesson = Lesson + "–ö–æ –≤—Ç–æ—Ä–æ–π —Ç–æ–∂–µ. –í–æ–æ–±—â–µ —Ç–æ–ø.\n"
        a = 0
        Lesson = Lesson + "–°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è: \n"
        check_lesson = False
        for i in range(1,7):
            if time_lesson.NumberOfMonth() % 2 == 0: 
                 a = i*2
            else:
                a = (i*2)-1
             # –ß–µ—Ç–Ω–∞—è/ –Ω–µ —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
            if pdb.get_lesson(time_lesson.todayIs()+a,group) == "nan":
                pass
            else: 
                check_lesson = True
                Lesson = pdb.ready_lesson(Lesson,group,a,i)
        if check_lesson is False:
            Lesson = "<b>–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç—É –ø–∞—Ä </b> ‚ú®üéâ\n –°–ø–∏ —Å–ø–æ–∫–æ–π–Ω–æ –∏ –∏–¥–∏ –≥—É–ª—è–π)"       
        await bot.send_message(user["chat_id"], Lesson, parse_mode='HTML', disable_web_page_preview=True)

# –£–≤–µ–¥–æ–º–ª—è—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
async def notif_every_lesson():
    for user in UsersDB.find({"sub":"True"}):
        #try:
        group = UsersDB.find_one({"chat_id":user["chat_id"]})["group"]
        Lesson = "<b> –£ —Ç–µ–±—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–∞–ª—å—à–µ: </b> \n "
        a = 0 #–õ–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å –∏—Å—Ö–æ–¥—è –∏–∑ —á–µ—Ç–Ω–æ–π/–Ω–µ—á–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–µ –∏ –∫–æ–≥–¥–∞.
        now = time_lesson.convertHourtoLesson()
        if pdb.get_lesson(time_lesson.todayIs()+1+now,group) == "nan":
            break
        if time_lesson.NumberOfMonth() % 2 == 0: 
            a = now*2
        else:
            a = (now*2)-1
             # –ß–µ—Ç–Ω–∞—è/ –Ω–µ —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
        if pdb.get_lesson(time_lesson.todayIs()+a,group) == "nan":
            pass
        else: 
            Lesson = pdb.ready_lesson(Lesson,group,a,now)     
        await bot.send_message(user["chat_id"], Lesson, parse_mode='HTML', disable_web_page_preview=True)
  
#–ú–æ–∏ –∑–∞–¥–∞—á–∏
@dp.message_handler(commands=['task'])
async def my_task(message: types.Message):
    await bot.send_message(message.chat.id, '<b> üí° –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ </b>', parse_mode='HTML')
    inline_button_complete = InlineKeyboardButton('–í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data='task_complete')
    inline_button_delete = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='task_delete')
    inline_button_change = InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='task_change')
    inline_task = InlineKeyboardMarkup().row(inline_button_complete,inline_button_change,inline_button_delete)
    for task in db["task"].find({"chat_id":message.chat.id}):
        await bot.send_message(message.chat.id,"<b>" + task["name"] + "</b>@ " + task["lesson"] + " @ –¥–æ " + task["timetodo"] + "  " + task['status'] , parse_mode='HTML', reply_markup=inline_task)
    

@dp.callback_query_handler(text_contains="complete")
async def process_callback(call: CallbackQuery):
    await call.answer("–ì–æ—Ç–æ–≤–æ",cache_time=60)
    task_manager.Comlete_task(call.from_user.id, call.message.text, db)
    await bot.delete_message(call.from_user.id, call.message.message_id)

@dp.message_handler(commands=['addtask'])
async def my_task(message: types.Message, state: FSMContext):
    await TaskCreate.name_select.set()
    await message.reply("–û–∫–µ–π, –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    
@dp.message_handler(state=TaskCreate.name_select)
async def select_name(message: types.Message,state: FSMContext):  
    async with state.proxy() as data:
        data['name'] = message.text
    await TaskCreate.lesson.set()
    await message.reply("–ê –ø–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É?(–°–æ–≤–µ—Ç—É—é —Ç–æ—á–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –∏–Ω–∞—á–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏)")

@dp.message_handler(state=TaskCreate.lesson)
async def select_lesson(message: types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['lesson'] = message.text
    await message.reply("–õ–∞–¥—ã, –∏ –¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?(–í —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–æ.–º–µ—Å—è—Ü 3.02 21.05)")
    await TaskCreate.time.set()

@dp.message_handler(state=TaskCreate.time)
async def select_lesson(message: types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['timetodo'] = message.text
        await bot.send_message(message.chat.id,"–¢–∞–∫, –æ–∫–µ–π. –¢–µ–±–µ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å: " + data['name'] + " –¥–æ " + data['timetodo'])
        task = task_manager.Task(data['name'],data['timetodo'],data['lesson'],message.chat.id)
        task.addtodb(db["task"])
    await state.finish()

        
async def scheduler():
    aioschedule.every().day.at("8:40").do(notif_morning)
    aioschedule.every().day.at("10:30").do(notif_every_lesson)
    aioschedule.every().day.at("12:30").do(notif_every_lesson)
    aioschedule.every().day.at("14:10").do(notif_every_lesson)
    aioschedule.every().day.at("16:10").do(notif_every_lesson)
    aioschedule.every().day.at("17:50").do(notif_every_lesson)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def on_startup(x):
    asyncio.create_task(scheduler())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)    

