import os
from sqlalchemy.sql.expression import text
import config
from aiogram import types, Dispatcher
from sqlalchemy import select,insert
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
import utils.task_manager as task_manager
from utils.db.db import Student, Group, import_from_xlsx
#–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

class Status(StatesGroup):  
    group_select = State()  # –°—Ç–∞—Ç—É—Å - –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    sub = State() #–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    complete = State()
    task_name = State()
    task_change = State()  #–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ 


async def send_welcome(message: types.Message):
    db_session = message.bot.get('db')
    sql = select(Student).where(Student.telegram_id == message.from_user.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ —Å—Ç—É–¥–µ–Ω—Ç
    async with db_session() as session:
        request = await session.execute(sql)
        student = request.scalar()
        if not student:
            student = Student(telegram_id=message.from_user.id)
            session.add(student)
            await session.commit()
            await Status.group_select.set()
            with open(config.FileLocation.cmd_welcome, 'r', encoding='utf-8') as file:
                await message.reply(file.read(), parse_mode='HTML', disable_web_page_preview=True)
        else:
            await message.answer(message.chat.id, "<b> –ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞ </b>", parse_mode='HTML', disable_web_page_preview=True)
            await Status.complete.set()
            await menu(message)

# –í–Ω–µ—Å–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã  
async def select_group(message: types.Message,state: FSMContext):
    db_session = message.bot.get('db')
    sql = select(Group).where(Group.name == message.text)
    async with db_session() as session:
        request = await session.execute(sql)
        group = request.scalar()
        if group:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            markup.add("–î–∞", "–ù–µ—Ç")
            # –ó–∞–Ω–æ—Å–∏–º –≥—Ä—É–ø–ø—É —Å—Ç—É–¥–µ–Ω—Ç—É
            sql = select(Student).where(Student.telegram_id == message.from_user.id)
            request = await session.execute(sql)
            student = request.scalar()
            student.group = message.text
            await session.commit()
            with open(config.FileLocation.cmd_group,'r', encoding='utf-8') as file:
                await message.answer(file.read(), parse_mode='HTML', disable_web_page_preview=True, reply_markup=markup)
            await Group.next()
        else:
            await message.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã –≥—Ä—É–ø–ø–∞ –±—ã–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ì–ò–ë–û-05-19. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –∑–Ω–∞—á–∏—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏–±–æ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.", parse_mode='HTML', disable_web_page_preview=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 20 –º–∏–Ω—É—Ç
async def select_notify(message: types.Message,state: FSMContext):
    db_session = message.bot.get('db')
    async with db_session() as session:
        if message.text == "–î–∞":
            sql = select(Student).where(Student.telegram_id == message.from_user.id)
            request = await session.execute(sql)
            student = request.scalar()
            student.notify = True
            await session.commit()
        else:
            sql = select(Student).where(Student.telegram_id == message.from_user.id)
            student = await session.execute(sql).scalar()
            student.notify = False
            await session.commit()
    markup = types.ReplyKeyboardRemove()
    await Group.complete.set()
    await menu(message)
    # –ö–æ–Ω–µ—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def menu(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add("–°–µ–≥–æ–¥–Ω—è ‚è≤", "–ó–∞–≤—Ç—Ä–∞ üìÜ", "–ù–µ–¥–µ–ª—è üìÖ","–ú–æ–∏ –∑–∞–¥–∞—á–∏ üìã","–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†")
    with open(config.FileLocation.cmd_menu,'r', encoding='utf-8') as file:
            await message.answer(file.read(), parse_mode='HTML', disable_web_page_preview=True, reply_markup=markup)

# –ü–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async def scheduler_today(message: types.Message):
    Lessons = f"<b> –ü–∞—Ä—ã –Ω–∞ {time_lesson.TodayToEmoji(0)} | {time_lesson.NumberOfMonth()} –Ω–µ–¥–µ–ª—è. </b> \n" 
    group = pdb.get_group(message.chat.id)
    check_lesson = False
    for i in range(1,7):
        if time_lesson.NumberOfMonth() % 2 == 0: # –ß–µ—Ç–Ω–∞—è/ –Ω–µ —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
            a = i*2
        else:
            a = (i*2)-1
        if pdb.get_lesson(time_lesson.todayIs()+a,group):
            pass
        else: 
            check_lesson = True
            Lessons = pdb.ready_lesson(Lessons,group, a,i)
    if check_lesson is False:
        Lessons = "<b>–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç—É –ø–∞—Ä </b> ‚ú®üéâ\n –ò–¥–∏ –≥—É–ª—è–π)"
    await message.reply(Lessons, parse_mode='HTML', disable_web_page_preview=True)

async def scheduler_tomorrow(message: types.Message):
    Lessons = f"<b> –ü–∞—Ä—ã –Ω–∞ {time_lesson.TodayToEmoji(0)} | {time_lesson.NumberOfMonth()} –Ω–µ–¥–µ–ª—è. </b> \n"
    group = pdb.get_group(message.chat.id)
    check_lesson = False
    for i in range(1,7):
        if time_lesson.NumberOfMonth() % 2 == 0: 
            a = i*2 + 12
        else:
            a = (i*2)-1 + 12
        if pdb.get_lesson(time_lesson.todayIs()+a,group):
            pass
        else: 
            check_lesson = True
            Lesson_obj = pdb.get_lesson(time_lesson.todayIs()+a,group)
            Lessons.join(f"{time_lesson.NumberToEmoji(i)} ")
    if check_lesson is False:
        Lessons = "<b>–ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç—É –ø–∞—Ä </b> ‚ú®üéâ\n –ú–æ–∂–µ—à—å —Å–ø–∞—Ç—å –∏ –≥—É–ª—è—Ç—å))"
    await message.reply(Lessons, parse_mode='HTML', disable_web_page_preview=True)


async def task(message: types.Message):
    await bot.send_message(message.chat.id, '<b> üí° –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ </b>', parse_mode='HTML')
    inline_button_complete = InlineKeyboardButton('–í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data='task_complete')
    inline_button_delete = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='task_delete')
    inline_button_change = InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='task_change')
    inline_task = InlineKeyboardMarkup().row(inline_button_complete,inline_button_change,inline_button_delete)
    for task in db["task"].find({"chat_id":message.chat.id}):
        await bot.send_message(message.chat.id,"<b>" + task["name"] + "</b>@ " + task["lesson"] + " @ –¥–æ " + task["timetodo"] + "  " + task['status'] , parse_mode='HTML', reply_markup=inline_task)
    


async def addtask(message: types.Message, state: FSMContext):
    await TaskCreate.name_select.set()
    await message.reply("–û–∫–µ–π, –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    

async def select_name(message: types.Message,state: FSMContext):  
    async with state.proxy() as data:
        data['name'] = message.text
    await TaskCreate.lesson.set()
    await message.reply("–ê –ø–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É?(–°–æ–≤–µ—Ç—É—é —Ç–æ—á–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –∏–Ω–∞—á–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏)")


async def select_lesson(message: types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['lesson'] = message.text
    await message.reply("–õ–∞–¥—ã, –∏ –¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?(–í —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–æ.–º–µ—Å—è—Ü 3.02 21.05)")
    await TaskCreate.time.set()


async def select_lesson(message: types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['timetodo'] = message.text
        await bot.send_message(message.chat.id,"–¢–∞–∫, –æ–∫–µ–π. –¢–µ–±–µ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å: " + data['name'] + " –¥–æ " + data['timetodo'])
        task = task_manager.Task(data['name'],data['timetodo'],data['lesson'],message.chat.id)
        task.addtodb(db["task"])
    await state.finish()

async def update_data(message: types.Message):
    await import_from_xlsx(message)

def register_commands(dp: Dispatcher):
    '''dp.register_message_handler( , )'''
    dp.register_message_handler(send_welcome, commands="start"),
    dp.register_message_handler(select_group, state=Status.group_select),
    dp.register_message_handler(select_notify, state=Status.sub),
    dp.register_message_handler(menu, commands="menu"),
    dp.register_message_handler(scheduler_today,commands=['day']),
    dp.register_message_handler(scheduler_tomorrow,commands='tomorow'),
    dp.register_message_handler(task,commands='task'),
    dp.register_message_handler(addtask,commands='addtask'),
    dp.register_message_handler(update_data,commands='update')